//数组去重方法
var punctuations_new=$('.textss').text();
var arrlength=punctuations_new.match(/[^\u4e00-\u9fa5]/g);
if(arrlength!=null){
	for(let i=-1;i<arrlength.length;i++){
		for(let j=0;j<i;j++){
			if(arrlength[i]==arrlength[j]){
				arrlength.splice(i,1);
				i=-1;
				j=0;
			}
		}				
	}			
	console.log(arrlength)
}	
  //字母替换方法
arrlength.forEach(function(e){
    punctuations_pro=punctuations_new.replace(eval("/("+e+")/g"),"<span>"+e+"</span>");
    punctuations_new=punctuations_pro;
  })
}

// 判断是否来自微信浏览器
var isWeiXin = function() {
	var ua = window.navigator.userAgent.toLowerCase();
	console.log(ua); //mozilla/5.0 (iphone; cpu iphone os 9_1 like mac os x) applewebkit/601.1.46 (khtml, like gecko)version/9.0 mobile/13b143 safari/601.1
	if(ua.match(/MicroMessenger/i) == 'micromessenger') {
		return true;
	} else {
		return false;
	}
};
var onVisibilityChanged = function() {
	if(!isWeiXin()) {
		console.log("不是来自微信内置浏览器");
		var visitState = document.visibilityState;
		var needReloadWhenShow = localStorage.getItem('need_reload_when_show');
		if((!visitState || visitState == 'visible') && needReloadWhenShow == 1) {
			localStorage.setItem('need_reload_when_show', '0');
			var href = location.pathname;
			if(href) {
				location.replace(href + '?' + new Date().getTime());
			} else {
				location.reload(true);
			}
		}
	}
};
// 用户退到后台或从后台返回触发
document.addEventListener("webkitvisibilitychange", onVisibilityChanged, false);
document.addEventListener("visibilitychange", onVisibilityChanged, false);

//禁止移动端上下拉取
var overscroll = function(el) {
	el.addEventListener('touchstart', function() {
	var top = el.scrollTop
	var totalScroll = el.scrollHeight
	var currentScroll = top + el.offsetHeight;
	    if(top === 0) {
		el.scrollTop = 1;
	    } else if(currentScroll === totalScroll) {
		el.scrollTop = top - 1;
	    }
	});
	el.addEventListener('touchmove', function(evt) {
	    if(el.offsetHeight < el.scrollHeight)
		evt._isScroller = true;
    });
}
overscroll(document.querySelector('.Muli ul'));
document.body.addEventListener('touchmove', function(evt) {
	if(!evt._isScroller) {
		evt.preventDefault();
	}
});

//开启移动端上下移动
document.addEventListener('touchmove', function (e) {
	e.returnValue = true;
}, false);

//判断是不是手机端
var isMobile = {
Android: function () {
    return navigator.userAgent.match(/Android/i) ? true : false;
},
BlackBerry: function () {
    return navigator.userAgent.match(/BlackBerry/i) ? true : false;
},
iOS: function () {
    return navigator.userAgent.match(/iPhone|iPad|iPod/i) ? true : false;
},
Windows: function () {
    return navigator.userAgent.match(/IEMobile/i) ? true : false;
},
any: function () {
    return (isMobile.Android() || isMobile.BlackBerry() || isMobile.iOS() || isMobile.Windows());
}
};
if (isMobile.any()) {
//如果是手机访问的话的操作！
}

//js原型链继承
var func=function(){};
var obj=new func();
//函数原型的构造函数完全等于对象原的构造函数
func.prototype.constructor===obj.__proto__.constructor;
//函数原型的构造函数完全等于本身
func.prototype.constructor===func;

//干预：阻止跨2G的负载，通过document.write插入的解析器阻塞脚本给2G用户
<script type="text/javascript">var cnzz_protocol = (("https:" == document.location.protocol) ? " https://" : " http://");document.write(unescape("%3Cspan id='cnzz_stat_icon_1260553427'%3E%3C/span%3E%3Cscript src='" + cnzz_protocol + "s95.cnzz.com/z_stat.php%3Fid%3D1260553427' type='text/javascript'%3E%3C/script%3E"));</script>

//上传图片缩略图
function getObjectURL(file) {
	var url = null;
	if(window.createObjectURL != undefined) { // basic
		url = window.createObjectURL(file);
	} else if(window.URL != undefined) { // mozilla(firefox)
		url = window.URL.createObjectURL(file);
	} else if(window.webkitURL != undefined) { // webkit or chrome
		url = window.webkitURL.createObjectURL(file);
	}
	return url;
}
$('#thumbnail').change(function() {
	var eImg = $('<img />');
	eImg.attr('src', getObjectURL($(this)[0].files[0])); // 或 this.files[0] this->input
	$(this).after(eImg);
});

//定义$
var $ = function(selector) {
	return document.querySelector(selector);
};

//js定义css前缀
var $css3Transform = function(element, value) {
var arrPriex = ["O", "Ms", "Moz", "Webkit", ""], length = arrPriex.length;
for (var i=0; i < length; i+=1) {
    element.style[arrPriex[i] + "Transform"] = value;
}
};

//matrix旋转计算(matrix(cosθ,sinθ,-sinθ,cosθ,0,0))
let degs=90*Math.PI/180;
let cosα=Math.cos(degs);
let sinα=Math.sin(degs);
$('.matrix').css('transform',`matrix(${cosα.toFixed(6)},${sinα.toFixed(6)},${-sinα.toFixed(6)},${cosα.toFixed(6)},50,50)`);

//阻止微信下拉显示域名
var movestart,movestop;
var panduan;
$(document).on('touchstart',(event)=>{
	movestart=event.originalEvent.changedTouches[0].screenY;
})
$(document).on('touchmove',(event)=>{
	movestop=event.originalEvent.changedTouches[0].screenY-movestart;
	if(movestop>=0&&$(this).scrollTop()==0){
		panduan=true;
	}
	if(panduan){
		$('.scroll').css('transform',`translate3D(0,${movestop}px,0)`);
		event.preventDefault();
		$(document).on('touchend',(event)=>{
			$('.scroll').css('transform','translate3D(0,0,0)');
			panduan=false;
		})
	}
})

//js跨域通讯
(iframe父容器)
window.addEventListener('message',function(e){
	console.log(e.data)
},false);

(iframe子容器)
window.parent.postMessage(masege, "*");

//原生ajax
function post(url, data, fn) {
var obj = new XMLHttpRequest();
obj.open("POST", url, true);
obj.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
//	obj.onreadystatechange = function() {
//	if (obj.readyState == 4 && (obj.status == 200 || obj.status == 304)) {  // 304未修改
//		fn.call(this, obj.responseText);
//	}
};
	datas={
		nums:data
	}
	datas=JSON.stringify(datas);
//	var data="parentId=0";
	obj.send(datas);
}
post('http://192.168.0.101:3000/123?id=123',nums.value);

//只能输入数字和2位小数(正则表达式)
function clearNoNum(obj)
{
　　obj.value = obj.value.replace(/[^\d.]/g,""); //清除“数字”和“.”以外的字符
　　obj.value = obj.value.replace(/^\./g,""); //验证第一个字符是数字而不是.
　　obj.value = obj.value.replace(/\.{2,}/g,"."); //只保留第一个. 清除多余的
　　obj.value = obj.value.replace(".","$#$").replace(/\./g,"").replace("$#$",".");
　　obj.value=obj.value.replace(/^(\-)*(\d+)\.(\d\d).*$/,'$1$2.$3');//只能输入两个小数
}

//fetch获取post数据
fetch('js/datas.json', {
    method: 'POST',
    headers: new Headers({
      'Content-Type': 'application/x-www-form-urlencoded', // 指定提交方式为表单提交
      'Accept': 'application/json' // 通过头指定，获取的数据类型是JSON
    }),
    body: new URLSearchParams([["foo", 1],["bar", 2]]).toString()
}).then((res)=>{
    return res.text()
}).then((res)=>{
    console.log(res)
})

//fetch获取get数据
fetch('js/datas.json?id=1&name=1', { // 在URL中写上传递的参数
    method: 'GET',
//  credentials: 'include' // 强制加入凭据头
  })
  .then((res)=>{
    return res.json() // 返回一个Promise，可以解析成JSON
  })
  .then((res)=>{
    console.log(res) // 获取JSON数据
  })
  
  //fetch封装
  /**
 * 将对象转成 a=1&b=2的形式
 * @param obj 对象
 */
function obj2String(obj, arr = [], idx = 0) {
  for (let item in obj) {
    arr[idx++] = [item, obj[item]]
  }
  return new URLSearchParams(arr).toString()
}

/**
 * 真正的请求
 * @param url 请求地址
 * @param options 请求参数
 * @param method 请求方式
 */
function commonFetcdh(url, options, method = 'GET') {
  const searchStr = obj2String(options)
  let initObj = {}
  if (method === 'GET') { // 如果是GET请求，拼接url
    url += '?' + searchStr
    initObj = {
      method: method,
      credentials: 'include'
    }
  } else {
    initObj = {
      method: method,
      credentials: 'include',
      headers: new Headers({
        'Accept': 'application/json',
        'Content-Type': 'application/x-www-form-urlencoded'
      }),
      body: searchStr
    }
  }
  fetch(url, initObj).then((res) => {
    return res.json()
  }).then((res) => {
    return res
  })
}

/**
 * GET请求
 * @param url 请求地址
 * @param options 请求参数
 */
function GET(url, options) {
  return commonFetcdh(url, options, 'GET')
}

/**
 * POST请求
 * @param url 请求地址
 * @param options 请求参数
 */
function POST(url, options) {
  return commonFetcdh(url, options, 'POST')
}

//请求方式选择
GET('https://www.baidu.com/search/error.html', {a:1,b:2})
POST('https://www.baidu.com/search/error.html', {a:1,b:2})

//小程序接口请求封装
this.requests = (resolve,url,types,data)=>{
	wx.request({
	url: this.conf.host + url,
	method: types,
	data: data,
	success: res => {
	  resolve(res.data)
	}
	})
}
new Promise(resolve=>{
	app.requests(resolve,'/Miniapp/redpacket/CommonProblem', 'GET', { login_key: login_key });
}).then(res=>{
	console.log(res);
});

//判断用户滑动方向
 var disX = this.touchStartX - this.touchEndX;
var absdisX = Math.abs(disX);
var disY = this.touchStartY - this.touchEndY;
var absdisY = Math.abs(disY);  
// 确定移动方向
// 0:上, 1:右, 2:下, 3:左
var direction = absdisX > absdisY ? (disX < 0 ? 1 : 3) : (disY < 0 ? 2 : 0); 
formList(dir) {  // 根据传入的滑动方向生成list的四个数组
    var list = [[], [], [], []];
    for(var i = 0; i < this.size; i++)
      for(var j = 0; j < this.size; j++) {
        switch(dir) {
          case 0:
            list[i].push(this.board.grid[j][i]);
            break;
          case 1:
            list[i].push(this.board.grid[i][this.size-1-j]);
            break;
          case 2:
            list[i].push(this.board.grid[this.size-1-j][i]);
            break;
          case 3:
            list[i].push(this.board.grid[i][j]);
            break;
        }
      }
    return list;
  }
//将list的每一个小数组中的数字提到前面，0放到末尾
changeItem(item) {  // 将 [0, 2, 0, 2] 改为 [2, 2, 0, 0]
    var cnt = 0;
    for(var i = 0; i < item.length; i++)
      if(item[i] != 0)
        item[cnt++] = item[i];
    for(var j = cnt; j < item.length; j++) 
      item[j] = 0;
    return item;
  }
//将相同值的单元格加起来，并将后面的一个单元格值变为0
combine(list) { // 滑动时相同的合并
    for(var i = 0; i < list.length; i++)  // 数字靠边
      list[i] = this.changeItem(list[i]);

    for(var i = 0; i < this.size; i++) { 
      for(var j = 1; j < this.size; j++) {
        if(list[i][j-1] == list[i][j] && list[i][j]!=0) {
          list[i][j-1] += list[i][j];
          list[i][j] = 0; 
        }
      }
    }
    for (var i = 0; i < list.length; i++)  // 再次数字靠边，避免0220变成0400的情况发生
      list[i] = this.changeItem(list[i]);

    return list;
}

//把图片处理成小图
renderImg: function (image) {
    var index = 0;
    for (var i = 0; i < 3; i++) {
	for (var j = 0; j < 3; j++) {
	    this.context.drawImage(image, 300 * j, 300 * i, 300, 600, 0, 0, 300, 300);
	    this.imgArr[index].src = this.canvas.toDataURL('image/jpeg');
	    this.imgArr[index].id = index;
	    index++;
	}
    }
}
